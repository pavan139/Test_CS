Python Programming Assignment: Advanced Concepts

Objective

This assignment focuses on advanced Python concepts covered in Week 3, including:
âœ… Date Manipulation
âœ… Control Flow (If Statements, Loops, and List Comprehensions)
âœ… Functions
âœ… Object-Oriented Programming (OOP)
âœ… JSON Data Handling

Each task is practical and relevant to workplace applications. Follow best coding practices, keep your code clean and readable, and test your solutions before submission.

Task 1: Date Manipulation â€“ Scheduling & Workdays

Objective: Work with the datetime module for scheduling and calculating workdays.

Part 1: Find the First Monday of Next Month

Write a function first_monday_next_month() that:
	â€¢	Determines the first Monday of the next month.
	â€¢	Returns the date in "YYYY-MM-DD" format.

ðŸ”¹ Example Usage:

print(first_monday_next_month())  
# Output: "2025-03-03" (if today is in February)

Part 2: Count Working Days Until a Future Date

Write a function working_days_until(future_date) that:
	â€¢	Takes a future date (format: "YYYY-MM-DD") as input.
	â€¢	Returns the number of weekdays (Mon-Fri) from today until that date.
	â€¢	If the future date falls on a weekend, adjust it to the next Monday before counting.

ðŸ”¹ Example Usage:

print(working_days_until("2025-03-15"))  
# Output: Number of weekdays until March 15, 2025

Task 2: Decision Making & Iteration

Objective: Apply control flow and list comprehensions.

Part 1: Analyze a List of Numbers

Write a function analyze_numbers(nums) that:
	â€¢	Accepts a list of numbers.
	â€¢	Prints:
	â€¢	The smallest and largest numbers in the list.
	â€¢	The average (mean) of all numbers.
	â€¢	How many numbers are even vs. odd.

ðŸ”¹ Example Usage:

numbers = [10, 25, 3, 8, 12, 7, 5]
analyze_numbers(numbers)

ðŸ”¹ Example Output:

Smallest number: 3
Largest number: 25
Average: 10.0
Even numbers: 3, Odd numbers: 4

Part 2: Filter Names by Length

Write a function filter_names(names, min_length, max_length) that:
	â€¢	Accepts a list of names.
	â€¢	Filters names that are between min_length and max_length characters.
	â€¢	Uses list comprehension.
	â€¢	Returns the filtered list.

ðŸ”¹ Example Usage:

names = ["Alice", "Bob", "Charlotte", "Daniel"]
print(filter_names(names, 5, 8))  
# Output: ['Alice', 'Daniel']

Task 3: The Workday Reminder (Modified FizzBuzz)

Objective: Use loops and conditional statements to automate task reminders.

Write a function task_reminder(n) that:
	â€¢	Prints numbers from 1 to n.
	â€¢	For numbers divisible by 4, print "Take a short break".
	â€¢	For numbers divisible by 6, print "Check your emails".
	â€¢	For numbers divisible by both 4 and 6, print "Time for a longer break!".
	â€¢	Otherwise, print the number.

ðŸ”¹ Hint:
	â€¢	A number divisible by both 4 and 6 is divisible by 12.

ðŸ”¹ Example Usage:

task_reminder(20)

ðŸ”¹ Example Output:

1
2
3
Take a short break
5
Check your emails
7
Take a short break
9
10
11
Time for a longer break!
...

Task 4: Functions â€“ Employee Performance Tracker

Objective: Process employee performance data using functions.

Write a function performance_summary(scores) that:
	â€¢	Accepts a dictionary, where:
	â€¢	Keys = Employee names
	â€¢	Values = Lists of performance scores
	â€¢	Returns a summary dictionary with:
	â€¢	The average score per employee.
	â€¢	A performance category:
	â€¢	"Excellent" (Score â‰¥ 85)
	â€¢	"Good" (Score 70-84)
	â€¢	"Needs Improvement" (Score < 70)

ðŸ”¹ Example Usage:

scores = {
    "Alice": [90, 85, 88, 92],
    "Bob": [72, 75],
    "Charlie": [60, 65, 58, 70, 55]
}
print(performance_summary(scores))

ðŸ”¹ Example Output:

{
    "Alice": {"Average Score": 88.75, "Category": "Excellent"},
    "Bob": {"Average Score": 73.5, "Category": "Good"},
    "Charlie": {"Average Score": 61.6, "Category": "Needs Improvement"}
}

Task 5: Object-Oriented Programming â€“ Company Devices

Objective: Use OOP to model workplace technology assets.

Part 1: Define a Device Class
	â€¢	Create a class Device with:
	â€¢	name (e.g., "Laptop")
	â€¢	brand (e.g., "Dell")
	â€¢	purchase_year (e.g., 2020)
	â€¢	Add a method get_age() that returns the deviceâ€™s age.

Part 2: Create a Computer Subclass
	â€¢	Inherit from Device.
	â€¢	Add an additional attribute ram_size.
	â€¢	Add a method describe() that prints details.

ðŸ”¹ Example Usage:

laptop = Computer("Laptop", "Apple", 2019, "16GB")
print(laptop.get_age())  
laptop.describe()

ðŸ”¹ Example Output:

Device: Laptop (Apple, Purchased: 2019)
RAM Size: 16GB

Task 6: JSON Data Handling â€“ Employee Records

Objective: Store and retrieve employee data using JSON files.

Part 1: Store Employee Data

Write a function save_employees(data, filename) that:
	â€¢	Saves a list of employee dictionaries to a JSON file.

Part 2: Load Employee Data

Write a function load_employees(filename) that:
	â€¢	Reads and returns the stored employee data.

ðŸ”¹ Example Usage:

employees = [
    {"name": "Alice", "position": "Manager", "salary": 75000},
    {"name": "Bob", "position": "Engineer", "salary": 60000}
]
save_employees(employees, "employees.json")
data = load_employees("employees.json")
print(data)

ðŸ”¹ Example Output:

[
    {"name": "Alice", "position": "Manager", "salary": 75000},
    {"name": "Bob", "position": "Engineer", "salary": 60000}
]

Submission Guidelines

âœ… Ensure your code is well-commented and follows PEP 8 standards.
âœ… Test each function before submitting.
âœ… Submit your solutions in a single Python script (.py file) or Jupyter Notebook (.ipynb file).

Deadline: ðŸ•’ [Insert Deadline Date]
Good luck, and happy coding! ðŸš€



Revised Task 6: JSON Data Handling â€“ Storing Employee Records

Objective: Learn how to store structured data in a JSON file.

Instructions:
	1.	Write a function save_employees(data, filename) that:
	â€¢	Saves a list of employee dictionaries to a JSON file.
	â€¢	Each dictionary contains:
	â€¢	"name" (employee name)
	â€¢	"position" (job title)
	â€¢	"salary" (employee salary)
	2.	After saving, the function should print a confirmation message with the total number of employees stored.

Example Input:

employees = [
    {"name": "Alice", "position": "Manager", "salary": 75000},
    {"name": "Bob", "position": "Engineer", "salary": 60000}
]
save_employees(employees, "employees.json")

Example Output:

Employee data has been saved. 2 records stored.

Why This is Easier?

âœ… No file loading requiredâ€”students only need to write to a file.
âœ… Provides a clear output message instead of requiring them to open a JSON file manually.
âœ… Still introduces JSON storage, a useful skill for working with structured data.

Would you like further simplifications or an optional extension for advanced students? ðŸš€
